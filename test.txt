This is a test statement for learning git

git add test.txt
1. git이 관리하도록 파일(test.txt) 추가
2. 버전 관리 중인 파일(test.txt)이 변경 되었을때 사용

git config --global user.name '이름'
git confi --globall user.emal '이메일'
최초 1번, commi에남을 ngit ame과 이메일 설정

git commit  
버전 만들기(commit) 후 vim으로 commit 메시지 입력

git log 
commit 내용 확인

git log -p
commit 간에 파일의 바뀐 내용을 보여줌

※로그 읽는법
+: 추가 또는 바뀐 내용
-: 이전 내용

+++ b/test2.txt 파일 추가됨
--- /dev/null 파일 없음


git log a24944a9c41cbd5d64189e16d7f2911c447d1e8a (commit id)
해당 commit을 포함한 이전 commit 내용만 보여줌

git diff 커밋ID1..커밋ID2
commit 간의 소스코드 차이를 보여줌


eset VS revert(커밋 취소 및 되돌리기)
------------------------------------
git reset 커밋ID --hard

원격 저장소에는 reset을 사용하면 안된다. 왜?
reset 옵션?

git revert 


GIT 매뉴얼 사용하기
----------------------
git commit --help

git commit -am "커밋메세지"  -> git add, commit, 커밋 메세지 입력을 한번에


branch
----------
-브랜치 확인
git branch

-브랜치 생성
git branch test_1

-브랜치 선택
git checkout test_1

-브랜치 간에 차이 확인
git log master..test_1 -p
git diff master..test_1

-git log 브랜치 출력
git log --branches --decorate --graph (--oneline)

merge
------
-브랜치 병합(master에 test_1을 가져와서 병합)
git checkout master
git merge test_1

-fast-forward
커밋을 생성하지 않는다.

-3wayMerge
커밋 내용이 다른 두 브랜치를 병합하는 방법, 새로운 커밋 생성

git checkout -b test_2   -> test_2 브랜치를 생성하고 체크아웃한다.
git branch -d test_2  -> test_2 브랜치를 삭제한다.


stash
-----
작업 내용을 commit 대신 임시로 저장할때 사용, 작업 내용의 인덱스가 체크아웃 중인 브랜치에 저장됨

git add
git stash
git stash apply 임시 저장한 작업 내용을 다시 불러옴
git stash drop 삭제
git stash pop  -> apply & drop


git bash에서 소스트리 사용하기
--------------------------
stree   -> 현재 프로젝트의 버전 관리를 소스트리에서 보여줌  

---------------------
좋은 커밋 메시지 작성법
=====================
1. 커밋 유형 지정
FEAT : 새로운 기능의 추가
FIX: 버그 수정
DOCS: 문서 수정
STYLE: 스타일 관련 기능(코드 포맷팅, 세미콜론 누락, 코드 자체의 변경이 없는 경우)
REFACTOR: 코드 리펙토링
TEST: 테스트 코트, 리펙토링 테스트 코드 추가
CHORE: 빌드 업무 수정, 패키지 매니저 수정(ex .gitignore 수정 같은 경우)
 
2. 제목과 본문을 빈 행으로 분리
   여러 행으로 구성된 커밋 로그를 -m 스위치를 사용해서 입력하기는 어렵다 적합한 편집기를 사용하여 편집을 진행하     여야 하는데(깃 커밋 에디터 사용법) 해당 글을 참고하자

3. 제목 행을 50자로 제한
  강제로 제한하는 것은 아니고 읽기 쉽고 간결하게 표현하기 위한 경험에 의한 규칙이다

4. 제목 행의 첫 글자는 대문자로 시작
readme file modification X
Readme file modification O

5. 제목 행 끝에 마침표를 넣지 않는다
제목 행의 끝에는 마침표가 필요 없다. 50자 규칙에 따르기 위해서라도 마침표를 넣는 것은 불필요한 공간 낭비이다
Open the door. X
Open the door O

6. 제목 행에 명령문을 사용한다
 "명령이나 설명하듯이 작성"
네 방을 치운다 (Clean your room)
문을 닫는다 (Close the door)
쓰레기를 갖다 버린다 (Take out the trash)

7. 본문은 72자마다 끊어 줄을 바꿔준다.

8. 본문을 사용하여 변경 한 내용과 이유 설명(어떻게 보다는 무엇과 왜를 설명한다)

9. 검토자가 원래 문제가 무엇인지 이해한다고 가정하지 말고 확실하게 설명 추가

10. 자신의 코드가 직관적으로 바로 파악 할 수 있다고 생각하지 말자

11. 팀에서 정한 Commit 규칙을 따르자

----------------------------
Tim pope의 커밋 메시지 템플릿
----------------------------
Capitalized, short (50 chars or less) summary

More detailed explanatory text, if necessary. Wrap it to about 72 characters or so. In some 
contexts, the first line is treated as the subject of an email and the rest of the text as 
the body. The blank line separating the summary from the body is critical (unless you omit 
the body entirely); tools like rebase can get confused if you run the two together.

Write your commit message in the imperative: "Fix bug" and not "Fixed bug" or "Fixes bug." 
This convention matches up with commit messages generated by commands like git merge and 
git revert.

Further paragraphs come after blank lines.

- Bullet points are okay, too

- Typically a hyphen or asterisk is used for the bullet, followed by a single space,
with blank lines in between, but conventions vary here

- Use a hanging indent

If you use an issue tracker, add a reference(s) to them at the bottom, like so:

Resolves: #123


-------------------------
$ git bash(linux?) 명령어
-------------------------
$ pwd -> 현재 폴더 위치 확인
$ cd 
$ mkdir 
$ ls
$ ls -al